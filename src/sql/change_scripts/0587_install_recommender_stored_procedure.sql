CREATE PROCEDURE SELECT_RECOMMENDED_ADVERT (
	IN in_registered_user_id INT, 
	IN in_ranking_threshold DECIMAL(3,2))
BEGIN

	DECLARE ranking_threshold INT(10) UNSIGNED;

	CREATE TEMPORARY TABLE RECOMMENDED_ADVERT (
		id INT(10) UNSIGNED NOT NULL,
		title VARCHAR(255) NULL DEFAULT NULL,
		description VARCHAR(3000) NULL DEFAULT NULL,
		study_duration INT(4) NULL DEFAULT NULL,
		funding VARCHAR(2000) NULL DEFAULT NULL,
		active TINYINT(1) NOT NULL,
		last_edited_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
		ranking INT(10) UNSIGNED NOT NULL DEFAULT 0,
		PRIMARY KEY (id),
		INDEX (last_edited_timestamp),
		INDEX (ranking)) ENGINE = INNODB
		SELECT ADVERT.id AS id, PROGRAM.title AS title, ADVERT.description AS description, ADVERT.study_duration AS study_duration, 
			ADVERT.funding AS funding, ADVERT.active AS active, ADVERT.last_edited_timestamp AS last_edited_timestamp, 
			COUNT(DISTINCT(APPLICATION_FORM2.id)) AS ranking
		FROM APPLICATION_FORM INNER JOIN APPLICATION_FORM_USER_ROLE
			ON APPLICATION_FORM.id = APPLICATION_FORM_USER_ROLE.application_form_id
		INNER JOIN APPLICATION_FORM_USER_ROLE AS APPLICATION_FORM_USER_ROLE2
			ON APPLICATION_FORM_USER_ROLE.registered_user_id = APPLICATION_FORM_USER_ROLE2.registered_user_id
		INNER JOIN APPLICATION_FORM AS APPLICATION_FORM2
			ON APPLICATION_FORM_USER_ROLE2.application_form_id = APPLICATION_FORM2.id
		INNER JOIN PROGRAM
			ON APPLICATION_FORM2.program_id = PROGRAM.id
		INNER JOIN ADVERT
			ON PROGRAM.advert_id = ADVERT.id
		WHERE APPLICATION_FORM.applicant_id = in_registered_user_id
			AND APPLICATION_FORM_USER_ROLE.application_role_id IN ("APPROVER", "INTERVIEWER",
				"PROJECTADMINISTRATOR", "REVIEWER", "SUGGESTEDSUPERVISOR", "STATEADMINISTRATOR", "SUPERVISOR")
			AND APPLICATION_FORM.program_id != PROGRAM.id
			AND PROGRAM.enabled = 1
			AND ADVERT.active = 1
			AND APPLICATION_FORM.status != "UNSUBMITTED"
			AND APPLICATION_FORM2.status != "UNSUBMITTED"
		GROUP BY ADVERT.id;
		
	CREATE TEMPORARY TABLE RECOMMENDED_ADVERT_SECONDARY (
		id INT(10) UNSIGNED NOT NULL,
		title VARCHAR(255) NULL DEFAULT NULL,
		description VARCHAR(3000) NULL DEFAULT NULL,
		study_duration INT(4) NULL DEFAULT NULL,
		funding VARCHAR(2000) NULL DEFAULT NULL,
		active TINYINT(1) NOT NULL,
		last_edited_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
		ranking INT(10) UNSIGNED NOT NULL DEFAULT 0,
		PRIMARY KEY (id),
		INDEX (last_edited_timestamp),
		INDEX (ranking)) ENGINE = INNODB
		SELECT ADVERT.id AS id, PROGRAM.title AS title, ADVERT.description AS description, ADVERT.study_duration AS study_duration, 
			ADVERT.funding AS funding, ADVERT.active AS active, ADVERT.last_edited_timestamp AS last_edited_timestamp, 
			COUNT(DISTINCT(APPLICATION_FORM3.id)) AS ranking
		FROM APPLICATION_FORM INNER JOIN APPLICATION_FORM AS APPLICATION_FORM2
			ON APPLICATION_FORM.program_id = APPLICATION_FORM2.program_id
		INNER JOIN APPLICATION_FORM AS APPLICATION_FORM3
			ON APPLICATION_FORM2.applicant_id = APPLICATION_FORM3.applicant_id
		INNER JOIN PROGRAM
			ON APPLICATION_FORM3.program_id = PROGRAM.id
		INNER JOIN ADVERT
			ON PROGRAM.advert_id = ADVERT.id
		LEFT JOIN RECOMMENDED_ADVERT
			ON ADVERT.id = RECOMMENDED_ADVERT.id
		WHERE APPLICATION_FORM.applicant_id = in_registered_user_id
			AND APPLICATION_FORM.program_id != PROGRAM.id
			AND PROGRAM.enabled = 1
			AND ADVERT.active = 1
			AND RECOMMENDED_ADVERT.id IS NULL
			AND APPLICATION_FORM.status != "UNSUBMITTED"
			AND APPLICATION_FORM2.status != "UNSUBMITTED"
			AND APPLICATION_FORM3.status != "UNSUBMITTED"
		GROUP BY ADVERT.id;
		
	INSERT INTO RECOMMENDED_ADVERT
		SELECT * FROM RECOMMENDED_ADVERT_SECONDARY;
	
	DELETE RECOMMENDED_ADVERT_SECONDARY.*
	FROM RECOMMENDED_ADVERT_SECONDARY;
	
	INSERT INTO RECOMMENDED_ADVERT_SECONDARY
		SELECT ADVERT.id AS id, PROGRAM.title AS title, ADVERT.description AS description, ADVERT.study_duration AS study_duration, 
			ADVERT.funding AS funding, ADVERT.active AS active, ADVERT.last_edited_timestamp AS last_edited_timestamp, 
			COUNT(DISTINCT(APPLICATION_FORM3.id)) AS ranking
		FROM APPLICATION_FORM INNER JOIN APPLICATION_FORM AS APPLICATION_FORM2
			ON APPLICATION_FORM.program_id = APPLICATION_FORM2.program_id
		INNER JOIN APPLICATION_FORM AS APPLICATION_FORM3
			ON APPLICATION_FORM2.applicant_id = APPLICATION_FORM3.applicant_id
		INNER JOIN PROGRAM
			ON APPLICATION_FORM3.program_id = PROGRAM.id
		INNER JOIN ADVERT
			ON PROGRAM.advert_id = ADVERT.id
		INNER JOIN RECOMMENDED_ADVERT
			ON ADVERT.id = RECOMMENDED_ADVERT.id
		WHERE APPLICATION_FORM.applicant_id = in_registered_user_id
			AND APPLICATION_FORM.program_id != PROGRAM.id
			AND PROGRAM.enabled = 1
			AND ADVERT.active = 1
			AND APPLICATION_FORM.status != "UNSUBMITTED"
			AND APPLICATION_FORM2.status != "UNSUBMITTED"
			AND APPLICATION_FORM3.status != "UNSUBMITTED"
		GROUP BY ADVERT.id;
		
	UPDATE RECOMMENDED_ADVERT INNER JOIN RECOMMENDED_ADVERT_SECONDARY
		ON RECOMMENDED_ADVERT.id = RECOMMENDED_ADVERT_SECONDARY.id
	SET RECOMMENDED_ADVERT.ranking = RECOMMENDED_ADVERT.ranking + RECOMMENDED_ADVERT_SECONDARY.ranking;
	
	DELETE RECOMMENDED_ADVERT_SECONDARY.*
	FROM RECOMMENDED_ADVERT_SECONDARY;
	
	INSERT INTO RECOMMENDED_ADVERT_SECONDARY
		SELECT ADVERT.id AS id, ADVERT.title AS title, ADVERT.description AS description, 
			ADVERT.study_duration AS study_duration, ADVERT.funding AS funding, ADVERT.active AS active, 
			ADVERT.last_edited_timestamp AS last_edited_timestamp, RECOMMENDED_ADVERT.ranking AS ranking
		FROM ADVERT INNER JOIN PROJECT
			ON ADVERT.id = PROJECT.advert_id
		INNER JOIN PROGRAM
			ON PROJECT.program_id = PROGRAM.id
		INNER JOIN APPLICATION_FORM
			ON PROJECT.id = APPLICATION_FORM.project_id
		INNER JOIN RECOMMENDED_ADVERT
			ON PROGRAM.advert_id = RECOMMENDED_ADVERT.id
		WHERE PROJECT.disabled = 0
			AND ADVERT.active = 1
			AND APPLICATION_FORM.applicant_id != in_registered_user_id
			AND APPLICATION_FORM.status != "UNSUBMITTED";
	
	INSERT INTO RECOMMENDED_ADVERT
		SELECT * FROM RECOMMENDED_ADVERT_SECONDARY;
	
	DROP TABLE RECOMMENDED_ADVERT_SECONDARY;
	
	SET ranking_threshold = (
		SELECT ROUND(MAX(RECOMMENDED_ADVERT.ranking) * in_ranking_threshold)
		FROM RECOMMENDED_ADVERT);
		
	SELECT RECOMMENDED_ADVERT.*
	FROM RECOMMENDED_ADVERT
	WHERE RECOMMENDED_ADVERT.ranking > ranking_threshold
	ORDER BY RECOMMENDED_ADVERT.ranking DESC,
		RECOMMENDED_ADVERT.last_edited_timestamp;
	
	DROP TABLE RECOMMENDED_ADVERT;
		
END
;
