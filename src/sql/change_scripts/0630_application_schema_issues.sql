ALTER TABLE ADVERT
	ADD COLUMN advert_closing_date_id INT(10) UNSIGNED,
	ADD INDEX (advert_closing_date_id),
	ADD CONSTRAINT advert_ibfk_2 FOREIGN KEY (advert_closing_date_id) REFERENCES ADVERT_CLOSING_DATE (id)
;

UPDATE ADVERT INNER JOIN (
	SELECT ADVERT_CLOSING_DATE.advert_id AS advert_id, 
		ADVERT_CLOSING_DATE.id AS advert_closing_date_id
	FROM ADVERT_CLOSING_DATE INNER JOIN (
		SELECT advert_id AS advert_id, 
			MIN(closing_date) as closing_date
		FROM ADVERT_CLOSING_DATE
		WHERE closing_date >= CURRENT_DATE()
		GROUP BY advert_id
		) AS ACTIVE_CLOSING_DATE
		ON ADVERT_CLOSING_DATE.advert_id = ACTIVE_CLOSING_DATE.advert_id 
		AND ADVERT_CLOSING_DATE.closing_date = ACTIVE_CLOSING_DATE.closing_date
	) AS ACTIVE_CLOSING_DATE
SET ADVERT.advert_closing_date_id = ACTIVE_CLOSING_DATE.advert_closing_date_id
WHERE ADVERT.id = ACTIVE_CLOSING_DATE.advert_id
;

DELETE FROM ADVERT_CLOSING_DATE
WHERE closing_date < CURRENT_DATE
;

RENAME TABLE APPLICATIONS_FILTER TO APPLICATION_FILTER
;

RENAME TABLE APPLICATIONS_FILTERING TO APPLICATION_FILTER_GROUP
;

DELETE FROM APPLICATION_FILTER
WHERE fiLtering_id IS NULL
;

ALTER TABLE APPLICATION_FILTER
	CHANGE COLUMN filtering_id application_filter_group_id INT(10) UNSIGNED NOT NULL
;

ALTER TABLE APPLICATION_FILTER_GROUP
	CHANGE COLUMN use_disjunction satisfy_all_conditions INT(1) UNSIGNED NOT NULL DEFAULT 1
;

UPDATE APPLICATION_FILTER_GROUP 
SET satisfy_all_conditions = IF(satisfy_all_conditions = 0, 1, 0)
;

RENAME TABLE APPLICATION_FORM TO APPLICATION
;

ALTER TABLE APPLICATION
	DROP FOREIGN KEY approver_requested_fk,
	DROP COLUMN approver_requested_restart_id
;

RENAME TABLE APPLICATION_FORM_ADDITIONAL_INFO TO APPLICATION_ADDITIONAL_INFORMATION
;

ALTER TABLE APPLICATION
	CHANGE COLUMN additional_info_id application_additional_information_id INT(10) UNSIGNED
;

RENAME TABLE APPLICATION_FORM_ACTION_OPTIONAL TO APPLICATION_ACTION_OPTIONAL
;

RENAME TABLE APPLICATION_FORM_ACTION_REQUIRED TO APPLICATION_ACTION_REQUIRED
;

ALTER TABLE APPLICATION_ACTION_REQUIRED
	CHANGE COLUMN application_form_id application_id INT(10) UNSIGNED NOT NULL
;

RENAME TABLE APPLICATION_FORM_ADDRESS TO APPLICATION_ADDRESS
;

ALTER TABLE APPLICATION
	CHANGE COLUMN application_form_address_id application_address_id INT(10) UNSIGNED
;

RENAME TABLE APPLICATION_FORM_DOCUMENT TO APPLICATION_DOCUMENT
;

ALTER TABLE APPLICATION
	CHANGE COLUMN application_form_document_id application_document_id INT(10) UNSIGNED
;

RENAME TABLE APPLICATION_FORM_EMPLOYMENT_POSITION TO APPLICATION_EMPLOYMENT_POSITION
;

ALTER TABLE APPLICATION_EMPLOYMENT_POSITION
	DROP FOREIGN KEY application_form_employment_position_fk,
	CHANGE COLUMN application_form_id application_id INT(10) UNSIGNED NOT NULL,
	CHANGE COLUMN current is_current INT(1) UNSIGNED NOT NULL,
	ADD FOREIGN KEY (application_id) REFERENCES APPLICATION (id)
;

RENAME TABLE APPLICATION_FORM_FUNDING TO APPLICATION_FUNDING
;

ALTER TABLE APPLICATION_FUNDING
	DROP FOREIGN KEY application_form_funding_fk,
	CHANGE COLUMN application_form_id application_id INT(10) UNSIGNED NOT NULL,
	ADD FOREIGN KEY (application_id) REFERENCES APPLICATION (id)
;

RENAME TABLE APPLICATION_FORM_LANGUAGE_QUALIFICATION TO APPLICATION_LANGUAGE_QUALIFICATION
;

RENAME TABLE APPLICATION_FORM_PERSONAL_DETAIL TO APPLICATION_PERSONAL_DETAIL
;

ALTER TABLE APPLICATION
	CHANGE COLUMN personal_detail_id application_personal_detail_id INT(10) UNSIGNED
;

ALTER TABLE APPLICATION_PERSONAL_DETAIL
	CHANGE COLUMN application_form_language_qualification_id application_language_qualification_id INT(10) UNSIGNED
;

UPDATE APPLICATION_PERSONAL_DETAIL INNER JOIN APPLICATION_LANGUAGE_QUALIFICATION
	ON APPLICATION_PERSONAL_DETAIL.application_language_qualification_id = 
		APPLICATION_LANGUAGE_QUALIFICATION.id
SET APPLICATION_PERSONAL_DETAIL.application_language_qualification_id = NULL
WHERE APPLICATION_LANGUAGE_QUALIFICATION.document_id IS NULL
;

DELETE 
FROM APPLICATION_LANGUAGE_QUALIFICATION
WHERE document_id IS NULL
;

ALTER TABLE APPLICATION_LANGUAGE_QUALIFICATION
	MODIFY COLUMN document_id INT(10) UNSIGNED NOT NULL
;

RENAME TABLE APPLICATION_FORM_PASSPORT TO APPLICATION_PASSPORT
;

ALTER TABLE APPLICATION_PERSONAL_DETAIL
	CHANGE COLUMN application_form_passport_id application_passport_id INT(10) UNSIGNED
;

ALTER TABLE APPLICATION_PERSONAL_DETAIL
	MODIFY COLUMN language_qualification_available INT(1) UNSIGNED,
	MODIFY COLUMN passport_available INT(1) UNSIGNED,
	ADD COLUMN first_language_english INT(1) UNSIGNED NOT NULL AFTER english_first_language,
	ADD COLUMN visa_required INT(1) UNSIGNED NOT NULL AFTER requires_visa
;

UPDATE APPLICATION_PERSONAL_DETAIL
SET first_language_english = IF(english_first_language = "1", 1, 0),
	visa_required = IF(requires_visa = "1", 1, 0)
;

ALTER TABLE APPLICATION_PERSONAL_DETAIL
	DROP COLUMN english_first_language,
	DROP COLUMN requires_visa
;

RENAME TABLE APPLICATION_FORM_PROGRAM_DETAIL TO APPLICATION_PROGRAM_DETAIL
;

ALTER TABLE APPLICATION
	CHANGE COLUMN program_detail_id application_program_detail_id INT(10) UNSIGNED
;

RENAME TABLE APPLICATION_FORM_QUALIFICATION TO APPLICATION_QUALIFICATION
;

ALTER TABLE APPLICATION_QUALIFICATION
	DROP FOREIGN KEY application_form_qual_fk,
	CHANGE COLUMN application_form_id application_id INT(10) UNSIGNED NOT NULL,
	ADD FOREIGN KEY (application_id) REFERENCES APPLICATION (id)
;

DELETE APPLICATION_QUALIFICATION.*
FROM APPLICATION_QUALIFICATION INNER JOIN APPLICATION
	ON APPLICATION_QUALIFICATION.application_id = APPLICATION.id
LEFT JOIN APPLICATION_FORM_TRANSFER
	ON APPLICATION.id = APPLICATION_FORM_TRANSFER.application_id
WHERE APPLICATION_QUALIFICATION.proof_of_award_id IS NULL
	AND (APPLICATION.status = "UNSUBMITTED"
		OR is_exported = 1
		OR APPLICATION.status IN ("WITHDRAWN", "REJECTED"))
;

ALTER TABLE APPLICATION
	CHANGE COLUMN applicant_id registered_user_id INT(10) UNSIGNED NOT NULL
;

ALTER TABLE DOCUMENT
	DROP FOREIGN KEY uploaded_by_fk,
	DROP uploaded_by_id
;

UPDATE DOCUMENT
SET is_referenced = 0
WHERE is_referenced IS NULL
;

ALTER TABLE DOCUMENT
	MODIFY COLUMN is_referenced INT(1) UNSIGNED NOT NULL DEFAULT 0
;

DELETE FROM DOCUMENT
WHERE file_name IS NULL
	OR file_content IS NULL
	OR content_type IS NULL
	OR document_type IS NULL
;

ALTER TABLE DOCUMENT
	MODIFY COLUMN file_name VARCHAR(500) NOT NULL,
	MODIFY COLUMN file_content LONGBLOB NOT NULL,
	MODIFY COLUMN content_type VARCHAR(200) NOT NULL,
	MODIFY COLUMN document_type VARCHAR(50) NOT NULL,
	CHANGE COLUMN uploaded_time_stamp created_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
;

CREATE PROCEDURE SP_FILL_MISSING_PROOF_OF_AWARD_DOCUMENTS (
	IN in_document_to_copy_id INT(10) UNSIGNED)
BEGIN

	DECLARE next_record_to_process INT(10) UNSIGNED;
	DECLARE last_record_to_process INT(10) UNSIGNED;
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
   	ROLLBACK;
	END;

	CREATE TEMPORARY TABLE BROKEN_QUALIFICATION (
		id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
		qualification_id INT(10) UNSIGNED NOT NULL,
		application_id INT(10) UNSIGNED NOT NULL,
		PRIMARY KEY (id)
	) ENGINE = MEMORY
	SELECT NULL AS id, id AS qualification_id,
		application_id AS application_id
	FROM APPLICATION_QUALIFICATION
	WHERE proof_of_award_id IS NULL;
	
	START TRANSACTION;
	
		SET next_record_to_process = 1;
	
		SET last_record_to_process = (
			SELECT MAX(id)
			FROM BROKEN_QUALIFICATION);
		
		WHILE next_record_to_process <= last_record_to_process DO
			
			INSERT INTO DOCUMENT(file_name, file_content, content_type, document_type, 
				created_timestamp)
			SELECT DOCUMENT.file_name, DOCUMENT.file_content, DOCUMENT.content_type,
				DOCUMENT.document_type, APPLICATION.submitted_timestamp
			FROM DOCUMENT INNER JOIN BROKEN_QUALIFICATION
			INNER JOIN APPLICATION
				ON BROKEN_QUALIFICATION.application_id = APPLICATION.id
			WHERE DOCUMENT.id = in_document_to_copy_id
				AND BROKEN_QUALIFICATION.id = next_record_to_process;
				
			UPDATE BROKEN_QUALIFICATION INNER JOIN APPLICATION_QUALIFICATION
				ON BROKEN_QUALIFICATION.qualification_id = APPLICATION_QUALIFICATION.id
			SET APPLICATION_QUALIFICATION.proof_of_award_id = LAST_INSERT_ID()
			WHERE BROKEN_QUALIFICATION.id = next_record_to_process;
			
			SET next_record_to_process = next_record_to_process + 1;
		
		END WHILE;
			
		DROP TABLE BROKEN_QUALIFICATION;
	
	COMMIT;
	
END
;
