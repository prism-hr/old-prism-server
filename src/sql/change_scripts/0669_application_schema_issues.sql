/* Fix program instance */

DELETE PROGRAM_INSTANCE.* 
FROM PROGRAM_INSTANCE INNER JOIN (
	SELECT MAX(id) AS id,
		program_id AS program_id
	FROM PROGRAM_INSTANCE
	GROUP BY program_id, academic_year, program_study_option_id
	HAVING COUNT(id) > 1) AS DUPLICATE_PROGRAM_INSTANCE
	ON PROGRAM_INSTANCE.program_id = DUPLICATE_PROGRAM_INSTANCE.program_id
	AND PROGRAM_INSTANCE.id != DUPLICATE_PROGRAM_INSTANCE.id
;

ALTER TABLE PROGRAM_INSTANCE
	ADD UNIQUE INDEX (program_id, academic_year, program_study_option_id),
	DROP INDEX program_instance_prog_fk
;

/* Add missing columns to transient resource entities */

ALTER TABLE PROJECT
	ADD COLUMN created_timestamp DATETIME AFTER title
;

UPDATE PROJECT
SET created_timestamp = "2014-01-02 09:00:00"
;

ALTER TABLE PROJECT
	MODIFY COLUMN created_timestamp DATETIME NOT NULL
;

ALTER TABLE ADVERT
	DROP COLUMN advert_type
;

UPDATE PROGRAM
SET code = CONCAT(LPAD(institution_id, 10, "0"), "-", code)
WHERE code NOT LIKE "UK0275%"
;

UPDATE PROGRAM
SET code = CONCAT(LPAD(institution_id, 10, "0"), "-", LPAD(id, 10, "0"))
WHERE code LIKE "UK0275%"
;

ALTER TABLE PROJECT
	ADD COLUMN code VARCHAR(50) AFTER program_id,
	ADD UNIQUE INDEX (code)
;

UPDATE PROJECT INNER JOIN PROGRAM
	ON PROJECT.program_id = PROGRAM.id
SET PROJECT.code = CONCAT(PROGRAM.code, "-", YEAR(PROJECT.created_timestamp), "-", LPAD(PROJECT.id, 10, "0"))
;

ALTER TABLE APPLICATION
	CHANGE COLUMN application_number code VARCHAR(50)
;

UPDATE APPLICATION
SET code = CONCAT(LPAD(institution_id, 10, "0"), "-", code)
;

ALTER TABLE PROGRAM
	ADD INDEX (institution_id),
	DROP INDEX institution_code,
	DROP INDEX institution_id,
	ADD INDEX (code),
	ADD INDEX (title),
	MODIFY COLUMN code VARCHAR(50)
;

ALTER TABLE PROJECT
	MODIFY COLUMN title VARCHAR(255) NOT NULL
;

/* Remove ALL_COMPLETED action and replace with evaluation */

INSERT INTO STATE_TRANSITION_EVALUATION (id)
VALUES ("APPLICATION_REVIEW_OUTCOME"),
	("APPLICATION_INTERVIEW_AVAILABILITY_OUTCOME"),
	("APPLICATION_INTERVIEW_FEEDBACK_OUTCOME"),
	("APPLICATION_CONFIRM_SUPERVISION_OUTCOME")
;

UPDATE STATE_TRANSITION INNER JOIN STATE_ACTION
	ON STATE_TRANSITION.state_action_id = STATE_ACTION.id
SET STATE_TRANSITION.state_transition_evaluation_id = "APPLICATION_REVIEW_OUTCOME"
WHERE STATE_ACTION.state_id = "APPLICATION_REVIEW_PENDING_FEEDBACK"
	AND STATE_ACTION.action_id = "APPLICATION_PROVIDE_REVIEW"
;

UPDATE STATE_TRANSITION INNER JOIN STATE_ACTION
	ON STATE_TRANSITION.state_action_id = STATE_ACTION.id
SET STATE_TRANSITION.state_transition_evaluation_id = "APPLICATION_INTERVIEW_AVAILABILITY_OUTCOME"
WHERE STATE_ACTION.state_id = "APPLICATION_INTERVIEW_PENDING_AVAILABILITY"
	AND STATE_ACTION.action_id = "APPLICATION_PROVIDE_INTERVIEW_AVAILABILITY"
;

UPDATE STATE_TRANSITION INNER JOIN STATE_ACTION
	ON STATE_TRANSITION.state_action_id = STATE_ACTION.id
SET STATE_TRANSITION.state_transition_evaluation_id = "APPLICATION_INTERVIEW_FEEDBACK_OUTCOME"
WHERE STATE_ACTION.state_id = "APPLICATION_INTERVIEW_PENDING_FEEDBACK"
	AND STATE_ACTION.action_id = "APPLICATION_PROVIDE_INTERVIEW_FEEDBACK"
;

UPDATE STATE_TRANSITION INNER JOIN STATE_ACTION
	ON STATE_TRANSITION.state_action_id = STATE_ACTION.id
SET STATE_TRANSITION.state_transition_evaluation_id = "APPLICATION_CONFIRM_SUPERVISION_OUTCOME"
WHERE STATE_ACTION.state_id = "APPLICATION_APPROVAL_PENDING_FEEDBACK"
	AND STATE_ACTION.action_id = "APPLICATION_CONFIRM_SUPERVISION"
;

/* Make transition action not null and remove processing order */

ALTER TABLE STATE_TRANSITION
	DROP COLUMN processing_order,
	DROP INDEX state_action_id,
	DROP INDEX state_action_id_2,
	DROP FOREIGN KEY state_transition_ibfk_2,
	DROP COLUMN state_transition_type_id,
	ADD UNIQUE INDEX (state_action_id, transition_state_id)
;

DROP TABLE STATE_TRANSITION_TYPE
;

UPDATE STATE_TRANSITION INNER JOIN STATE_ACTION
	ON STATE_TRANSITION.state_action_id = STATE_ACTION.id
SET STATE_TRANSITION.transition_action_id = STATE_ACTION.action_id
WHERE STATE_TRANSITION.transition_action_id IS NULL
;

ALTER TABLE STATE_TRANSITION
	MODIFY COLUMN transition_action_id VARCHAR(100) NOT NULL
;

/* Add default state action assignment */

ALTER TABLE STATE_ACTION_ASSIGNMENT
	ADD COLUMN is_default INT(1) UNSIGNED,
	ADD INDEX (is_default)
;

UPDATE STATE_ACTION INNER JOIN STATE_ACTION_ASSIGNMENT
	ON STATE_ACTION.id = STATE_ACTION_ASSIGNMENT.id
SET STATE_ACTION_ASSIGNMENT.is_default = 1
WHERE STATE_ACTION.action_id IN ("APPLICATION_EDIT_AS_CREATOR", 
	"APPLICATION_VIEW_AS_CREATOR", "APPLICATION_COMPLETE")
;

UPDATE STATE_ACTION INNER JOIN STATE_ACTION_ASSIGNMENT
	ON STATE_ACTION.id = STATE_ACTION_ASSIGNMENT.id
SET STATE_ACTION_ASSIGNMENT.is_default = 1
WHERE STATE_ACTION.action_id = "PROJECT_CONFIGURE"
;

UPDATE STATE_ACTION INNER JOIN STATE_ACTION_ASSIGNMENT
	ON STATE_ACTION.id = STATE_ACTION_ASSIGNMENT.id
SET STATE_ACTION_ASSIGNMENT.is_default = 1
WHERE STATE_ACTION.action_id = "PROGRAM_VIEW"
	AND STATE_ACTION.state_id = "PROGRAM_APPROVAL"
;

UPDATE STATE_ACTION INNER JOIN STATE_ACTION_ASSIGNMENT
	ON STATE_ACTION.id = STATE_ACTION_ASSIGNMENT.id
SET STATE_ACTION_ASSIGNMENT.is_default = 1
WHERE STATE_ACTION.action_id = "PROGRAM_EDIT"
	AND STATE_ACTION.state_id = "PROGRAM_APPROVAL_PENDING_CORRECTION"
;

UPDATE STATE_ACTION INNER JOIN STATE_ACTION_ASSIGNMENT
	ON STATE_ACTION.id = STATE_ACTION_ASSIGNMENT.id
SET STATE_ACTION_ASSIGNMENT.is_default = 1
WHERE STATE_ACTION.action_id = "PROGRAM_CONFIGURE"
;
