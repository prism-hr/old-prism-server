INSERT INTO APPLICATION_FORM_ACTION_REQUIRED(application_form_user_role_id, action_id, deadline_timestamp,
	bind_deadline_to_due_date, raises_urgent_flag, assigned_timestamp)
	SELECT ORPHAN_APPLICATION_FORM_USER_ROLE.id, "COMPLETE_REVIEW_STAGE", ORPHAN_APPLICATION_FORM_USER_ROLE.due_date,
		1, IF(ORPHAN_APPLICATION_FORM_USER_ROLE.due_date <= CURRENT_DATE(), 1, 0), EVENT.event_date
	FROM (
		SELECT APPLICATION_FORM_USER_ROLE.id AS id, MAX(EVENT.id) AS last_state_change_event_id,
			APPLICATION_FORM.status AS status, APPLICATION_FORM.next_status AS next_status,
			APPLICATION_FORM.due_date
		FROM APPLICATION_FORM_USER_ROLE INNER JOIN APPLICATION_FORM
			ON APPLICATION_FORM_USER_ROLE.application_form_id = APPLICATION_FORM.id
		INNER JOIN EVENT
			ON APPLICATION_FORM.id = EVENT.application_form_id
		INNER JOIN STATE_CHANGE_EVENT
			ON EVENT.id = STATE_CHANGE_EVENT.id
		LEFT JOIN APPLICATION_FORM_ACTION_REQUIRED
			ON APPLICATION_FORM_USER_ROLE.id = APPLICATION_FORM_ACTION_REQUIRED.application_form_user_role_id
		WHERE APPLICATION_FORM_USER_ROLE.application_role_id = "SUPERADMINISTRATOR"
			AND APPLICATION_FORM.status = "REVIEW"
			AND APPLICATION_FORM.next_status IS NULL
		GROUP BY APPLICATION_FORM_USER_ROLE.id
		HAVING COUNT(APPLICATION_FORM_ACTION_REQUIRED.id) = 0) AS ORPHAN_APPLICATION_FORM_USER_ROLE
	INNER JOIN EVENT
		ON ORPHAN_APPLICATION_FORM_USER_ROLE.last_state_change_event_id = EVENT.id
;

INSERT INTO APPLICATION_FORM_ACTION_REQUIRED(application_form_user_role_id, action_id, deadline_timestamp,
	bind_deadline_to_due_date, raises_urgent_flag, assigned_timestamp)
	SELECT ORPHAN_APPLICATION_FORM_USER_ROLE.id, "COMPLETE_INTERVIEW_STAGE", ORPHAN_APPLICATION_FORM_USER_ROLE.due_date,
		1, IF(ORPHAN_APPLICATION_FORM_USER_ROLE.due_date <= CURRENT_DATE(), 1, 0), EVENT.event_date
	FROM (
		SELECT APPLICATION_FORM_USER_ROLE.id AS id, MAX(EVENT.id) AS last_state_change_event_id,
			APPLICATION_FORM.status AS status, APPLICATION_FORM.next_status AS next_status,
			APPLICATION_FORM.due_date
		FROM APPLICATION_FORM_USER_ROLE INNER JOIN APPLICATION_FORM
			ON APPLICATION_FORM_USER_ROLE.application_form_id = APPLICATION_FORM.id
		INNER JOIN EVENT
			ON APPLICATION_FORM.id = EVENT.application_form_id
		INNER JOIN STATE_CHANGE_EVENT
			ON EVENT.id = STATE_CHANGE_EVENT.id
		INNER JOIN INTERVIEW
			ON APPLICATION_FORM.latest_interview_id = INTERVIEW.id
		LEFT JOIN APPLICATION_FORM_ACTION_REQUIRED
			ON APPLICATION_FORM_USER_ROLE.id = APPLICATION_FORM_ACTION_REQUIRED.application_form_user_role_id
		WHERE APPLICATION_FORM_USER_ROLE.application_role_id = "SUPERADMINISTRATOR"
			AND APPLICATION_FORM.status = "INTERVIEW"
			AND INTERVIEW.stage IN ("SCHEDULING", "SCHEDULED")
			AND APPLICATION_FORM.next_status IS NULL
		GROUP BY APPLICATION_FORM_USER_ROLE.id
		HAVING COUNT(APPLICATION_FORM_ACTION_REQUIRED.id) = 0) AS ORPHAN_APPLICATION_FORM_USER_ROLE
	INNER JOIN EVENT
		ON ORPHAN_APPLICATION_FORM_USER_ROLE.last_state_change_event_id = EVENT.id
;

INSERT INTO APPLICATION_FORM_ACTION_REQUIRED(application_form_user_role_id, action_id, deadline_timestamp,
	bind_deadline_to_due_date, raises_urgent_flag, assigned_timestamp)
	SELECT ORPHAN_APPLICATION_FORM_USER_ROLE.id, "COMPLETE_INTERVIEW_STAGE", ORPHAN_APPLICATION_FORM_USER_ROLE.due_date,
		1, IF(ORPHAN_APPLICATION_FORM_USER_ROLE.due_date <= CURRENT_DATE(), 1, 0), EVENT.event_date
	FROM (
		SELECT APPLICATION_FORM_USER_ROLE.id AS id, MAX(EVENT.id) AS last_state_change_event_id,
			APPLICATION_FORM.status AS status, APPLICATION_FORM.next_status AS next_status,
			APPLICATION_FORM.due_date
		FROM APPLICATION_FORM_USER_ROLE INNER JOIN APPLICATION_FORM
			ON APPLICATION_FORM_USER_ROLE.application_form_id = APPLICATION_FORM.id
		INNER JOIN EVENT
			ON APPLICATION_FORM.id = EVENT.application_form_id
		INNER JOIN STATE_CHANGE_EVENT
			ON EVENT.id = STATE_CHANGE_EVENT.id
		INNER JOIN INTERVIEW
			ON APPLICATION_FORM.latest_interview_id = INTERVIEW.id
		LEFT JOIN APPLICATION_FORM_ACTION_REQUIRED
			ON APPLICATION_FORM_USER_ROLE.id = APPLICATION_FORM_ACTION_REQUIRED.application_form_user_role_id
		WHERE APPLICATION_FORM_USER_ROLE.application_role_id = "SUPERADMINISTRATOR"
			AND APPLICATION_FORM.status = "INTERVIEW"
			AND INTERVIEW.stage = "SCHEDULED"
			AND APPLICATION_FORM.next_status IS NULL
		GROUP BY APPLICATION_FORM_USER_ROLE.id
		HAVING COUNT(APPLICATION_FORM_ACTION_REQUIRED.id) = 0) AS ORPHAN_APPLICATION_FORM_USER_ROLE
	INNER JOIN EVENT
		ON ORPHAN_APPLICATION_FORM_USER_ROLE.last_state_change_event_id = EVENT.id
;
		
INSERT INTO APPLICATION_FORM_ACTION_REQUIRED(application_form_user_role_id, action_id, deadline_timestamp,
	bind_deadline_to_due_date, raises_urgent_flag, assigned_timestamp)
	SELECT ORPHAN_APPLICATION_FORM_USER_ROLE.id, "COMPLETE_APPROVAL_STAGE", ORPHAN_APPLICATION_FORM_USER_ROLE.due_date,
		1, IF(ORPHAN_APPLICATION_FORM_USER_ROLE.due_date <= CURRENT_DATE(), 1, 0), EVENT.event_date
	FROM (
		SELECT APPLICATION_FORM_USER_ROLE.id AS id, MAX(EVENT.id) AS last_state_change_event_id,
			APPLICATION_FORM.status AS status, APPLICATION_FORM.next_status AS next_status,
			APPLICATION_FORM.due_date
		FROM APPLICATION_FORM_USER_ROLE INNER JOIN APPLICATION_FORM
			ON APPLICATION_FORM_USER_ROLE.application_form_id = APPLICATION_FORM.id
		INNER JOIN EVENT
			ON APPLICATION_FORM.id = EVENT.application_form_id
		INNER JOIN STATE_CHANGE_EVENT
			ON EVENT.id = STATE_CHANGE_EVENT.id
		LEFT JOIN APPLICATION_FORM_ACTION_REQUIRED
			ON APPLICATION_FORM_USER_ROLE.id = APPLICATION_FORM_ACTION_REQUIRED.application_form_user_role_id
		WHERE APPLICATION_FORM_USER_ROLE.application_role_id = "SUPERADMINISTRATOR"
			AND APPLICATION_FORM.status = "APPROVAL"
			AND APPLICATION_FORM.next_status IS NULL
		GROUP BY APPLICATION_FORM_USER_ROLE.id
		HAVING COUNT(APPLICATION_FORM_ACTION_REQUIRED.id) = 0) AS ORPHAN_APPLICATION_FORM_USER_ROLE
	INNER JOIN EVENT
		ON ORPHAN_APPLICATION_FORM_USER_ROLE.last_state_change_event_id = EVENT.id
;
		
INSERT INTO APPLICATION_FORM_ACTION_REQUIRED(application_form_user_role_id, action_id, deadline_timestamp,
	bind_deadline_to_due_date, raises_urgent_flag, assigned_timestamp)
	SELECT ORPHAN_APPLICATION_FORM_USER_ROLE.id, "ASSIGN_REVIEWERS", ORPHAN_APPLICATION_FORM_USER_ROLE.due_date,
		1, IF(ORPHAN_APPLICATION_FORM_USER_ROLE.due_date <= CURRENT_DATE(), 1, 0), EVENT.event_date
	FROM (
		SELECT APPLICATION_FORM_USER_ROLE.id AS id, MAX(EVENT.id) AS last_state_change_event_id,
			APPLICATION_FORM.status AS status, APPLICATION_FORM.next_status AS next_status,
			APPLICATION_FORM.due_date
		FROM APPLICATION_FORM_USER_ROLE INNER JOIN APPLICATION_FORM
			ON APPLICATION_FORM_USER_ROLE.application_form_id = APPLICATION_FORM.id
		INNER JOIN EVENT
			ON APPLICATION_FORM.id = EVENT.application_form_id
		INNER JOIN STATE_CHANGE_EVENT
			ON EVENT.id = STATE_CHANGE_EVENT.id
		LEFT JOIN APPLICATION_FORM_ACTION_REQUIRED
			ON APPLICATION_FORM_USER_ROLE.id = APPLICATION_FORM_ACTION_REQUIRED.application_form_user_role_id
		WHERE APPLICATION_FORM_USER_ROLE.application_role_id = "SUPERADMINISTRATOR"
			AND APPLICATION_FORM.next_status = "REVIEW"
		GROUP BY APPLICATION_FORM_USER_ROLE.id
		HAVING COUNT(APPLICATION_FORM_ACTION_REQUIRED.id) = 0) AS ORPHAN_APPLICATION_FORM_USER_ROLE
	INNER JOIN EVENT
		ON ORPHAN_APPLICATION_FORM_USER_ROLE.last_state_change_event_id = EVENT.id
;

INSERT INTO APPLICATION_FORM_ACTION_REQUIRED(application_form_user_role_id, action_id, deadline_timestamp,
	bind_deadline_to_due_date, raises_urgent_flag, assigned_timestamp)
	SELECT ORPHAN_APPLICATION_FORM_USER_ROLE.id, "ASSIGN_INTERVIEWERS", ORPHAN_APPLICATION_FORM_USER_ROLE.due_date,
		1, IF(ORPHAN_APPLICATION_FORM_USER_ROLE.due_date <= CURRENT_DATE(), 1, 0), EVENT.event_date
	FROM (
		SELECT APPLICATION_FORM_USER_ROLE.id AS id, MAX(EVENT.id) AS last_state_change_event_id,
			APPLICATION_FORM.status AS status, APPLICATION_FORM.next_status AS next_status,
			APPLICATION_FORM.due_date
		FROM APPLICATION_FORM_USER_ROLE INNER JOIN APPLICATION_FORM
			ON APPLICATION_FORM_USER_ROLE.application_form_id = APPLICATION_FORM.id
		INNER JOIN EVENT
			ON APPLICATION_FORM.id = EVENT.application_form_id
		INNER JOIN STATE_CHANGE_EVENT
			ON EVENT.id = STATE_CHANGE_EVENT.id
		LEFT JOIN APPLICATION_FORM_ACTION_REQUIRED
			ON APPLICATION_FORM_USER_ROLE.id = APPLICATION_FORM_ACTION_REQUIRED.application_form_user_role_id
		WHERE APPLICATION_FORM_USER_ROLE.application_role_id = "SUPERADMINISTRATOR"
			AND APPLICATION_FORM.next_status = "INTERVIEW"
		GROUP BY APPLICATION_FORM_USER_ROLE.id
		HAVING COUNT(APPLICATION_FORM_ACTION_REQUIRED.id) = 0) AS ORPHAN_APPLICATION_FORM_USER_ROLE
	INNER JOIN EVENT
		ON ORPHAN_APPLICATION_FORM_USER_ROLE.last_state_change_event_id = EVENT.id
;

INSERT INTO APPLICATION_FORM_ACTION_REQUIRED(application_form_user_role_id, action_id, deadline_timestamp,
	bind_deadline_to_due_date, raises_urgent_flag, assigned_timestamp)
	SELECT ORPHAN_APPLICATION_FORM_USER_ROLE.id, "ASSIGN_SUPERVISORS", ORPHAN_APPLICATION_FORM_USER_ROLE.due_date,
		1, IF(ORPHAN_APPLICATION_FORM_USER_ROLE.due_date <= CURRENT_DATE(), 1, 0), EVENT.event_date
	FROM (
		SELECT APPLICATION_FORM_USER_ROLE.id AS id, MAX(EVENT.id) AS last_state_change_event_id,
			APPLICATION_FORM.status AS status, APPLICATION_FORM.next_status AS next_status,
			APPLICATION_FORM.due_date
		FROM APPLICATION_FORM_USER_ROLE INNER JOIN APPLICATION_FORM
			ON APPLICATION_FORM_USER_ROLE.application_form_id = APPLICATION_FORM.id
		INNER JOIN EVENT
			ON APPLICATION_FORM.id = EVENT.application_form_id
		INNER JOIN STATE_CHANGE_EVENT
			ON EVENT.id = STATE_CHANGE_EVENT.id
		LEFT JOIN APPLICATION_FORM_ACTION_REQUIRED
			ON APPLICATION_FORM_USER_ROLE.id = APPLICATION_FORM_ACTION_REQUIRED.application_form_user_role_id
		WHERE APPLICATION_FORM_USER_ROLE.application_role_id = "SUPERADMINISTRATOR"
			AND APPLICATION_FORM.next_status = "APPROVAL"
		GROUP BY APPLICATION_FORM_USER_ROLE.id
		HAVING COUNT(APPLICATION_FORM_ACTION_REQUIRED.id) = 0) AS ORPHAN_APPLICATION_FORM_USER_ROLE
	INNER JOIN EVENT
		ON ORPHAN_APPLICATION_FORM_USER_ROLE.last_state_change_event_id = EVENT.id
;

INSERT INTO APPLICATION_FORM_ACTION_REQUIRED(application_form_user_role_id, action_id, deadline_timestamp,
	bind_deadline_to_due_date, raises_urgent_flag, assigned_timestamp)
	SELECT ORPHAN_APPLICATION_FORM_USER_ROLE.id, "CONFIRM_OFFER_RECOMMENDATION", ORPHAN_APPLICATION_FORM_USER_ROLE.due_date,
		1, IF(ORPHAN_APPLICATION_FORM_USER_ROLE.due_date <= CURRENT_DATE(), 1, 0), EVENT.event_date
	FROM (
		SELECT APPLICATION_FORM_USER_ROLE.id AS id, MAX(EVENT.id) AS last_state_change_event_id,
			APPLICATION_FORM.status AS status, APPLICATION_FORM.next_status AS next_status,
			APPLICATION_FORM.due_date
		FROM APPLICATION_FORM_USER_ROLE INNER JOIN APPLICATION_FORM
			ON APPLICATION_FORM_USER_ROLE.application_form_id = APPLICATION_FORM.id
		INNER JOIN EVENT
			ON APPLICATION_FORM.id = EVENT.application_form_id
		INNER JOIN STATE_CHANGE_EVENT
			ON EVENT.id = STATE_CHANGE_EVENT.id
		LEFT JOIN APPLICATION_FORM_ACTION_REQUIRED
			ON APPLICATION_FORM_USER_ROLE.id = APPLICATION_FORM_ACTION_REQUIRED.application_form_user_role_id
		WHERE APPLICATION_FORM_USER_ROLE.application_role_id = "SUPERADMINISTRATOR"
			AND APPLICATION_FORM.next_status = "APPROVED"
		GROUP BY APPLICATION_FORM_USER_ROLE.id
		HAVING COUNT(APPLICATION_FORM_ACTION_REQUIRED.id) = 0) AS ORPHAN_APPLICATION_FORM_USER_ROLE
	INNER JOIN EVENT
		ON ORPHAN_APPLICATION_FORM_USER_ROLE.last_state_change_event_id = EVENT.id
;

INSERT INTO APPLICATION_FORM_ACTION_REQUIRED(application_form_user_role_id, action_id, deadline_timestamp,
	bind_deadline_to_due_date, raises_urgent_flag, assigned_timestamp)
	SELECT ORPHAN_APPLICATION_FORM_USER_ROLE.id, "CONFIRM_REJECTION", ORPHAN_APPLICATION_FORM_USER_ROLE.due_date,
		1, IF(ORPHAN_APPLICATION_FORM_USER_ROLE.due_date <= CURRENT_DATE(), 1, 0), EVENT.event_date
	FROM (
		SELECT APPLICATION_FORM_USER_ROLE.id AS id, MAX(EVENT.id) AS last_state_change_event_id,
			APPLICATION_FORM.status AS status, APPLICATION_FORM.next_status AS next_status,
			APPLICATION_FORM.due_date
		FROM APPLICATION_FORM_USER_ROLE INNER JOIN APPLICATION_FORM
			ON APPLICATION_FORM_USER_ROLE.application_form_id = APPLICATION_FORM.id
		INNER JOIN EVENT
			ON APPLICATION_FORM.id = EVENT.application_form_id
		INNER JOIN STATE_CHANGE_EVENT
			ON EVENT.id = STATE_CHANGE_EVENT.id
		LEFT JOIN APPLICATION_FORM_ACTION_REQUIRED
			ON APPLICATION_FORM_USER_ROLE.id = APPLICATION_FORM_ACTION_REQUIRED.application_form_user_role_id
		WHERE APPLICATION_FORM_USER_ROLE.application_role_id = "SUPERADMINISTRATOR"
			AND APPLICATION_FORM.next_status = "REJECTED"
		GROUP BY APPLICATION_FORM_USER_ROLE.id
		HAVING COUNT(APPLICATION_FORM_ACTION_REQUIRED.id) = 0) AS ORPHAN_APPLICATION_FORM_USER_ROLE
	INNER JOIN EVENT
		ON ORPHAN_APPLICATION_FORM_USER_ROLE.last_state_change_event_id = EVENT.id
;
