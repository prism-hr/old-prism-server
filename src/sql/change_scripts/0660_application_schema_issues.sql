/* Application creation comments */

INSERT INTO COMMENT (application_id, action_id, user_id, role_id, created_timestamp, transition_state_id)
	SELECT id, "PROGRAM_CREATE_APPLICATION", user_id, "APPLICATION_CREATOR", created_timestamp, "APPLICATION_UNSUBMITTED"
	FROM APPLICATION
	WHERE project_id IS NULL
		UNION
	SELECT id, "PROJECT_CREATE_APPLICATION", user_id, "APPLICATION_CREATOR", created_timestamp, "APPLICATION_UNSUBMITTED"
	FROM APPLICATION
	WHERE project_id IS NOT NULL
;

/* Application submission comments */

INSERT INTO COMMENT (application_id, action_id, user_id, role_id, created_timestamp, transition_state_id)
	SELECT id, "APPLICATION_COMPLETE", user_id, "APPLICATION_CREATOR", submitted_timestamp, "APPLICATION_VALIDATION"
	FROM APPLICATION
	WHERE submitted_timestamp IS NOT NULL
;

INSERT IGNORE INTO USER (first_name, last_name, email, activation_code)
	SELECT firstname, lastname, email, UUID()
	FROM APPLICATION_REFEREE
	WHERE user_id IS NULL
;

UPDATE APPLICATION_REFEREE INNER JOIN USER
	ON APPLICATION_REFEREE.email = USER.email
SET APPLICATION_REFEREE.user_id = USER.id
WHERE APPLICATION_REFEREE.user_id IS NULL
;

ALTER TABLE APPLICATION_REFEREE
	DROP COLUMN firstname,
	DROP COLUMN lastname,
	DROP COLUMN email
;

UPDATE APPLICATION_REFEREE
SET declined = 0
WHERE comment_id IS NOT NULL
;

UPDATE APPLICATION_REFEREE INNER JOIN APPLICATION_REFEREE AS DUPLICATE_REFEREE
	ON APPLICATION_REFEREE.application_id = DUPLICATE_REFEREE.application_id
	AND APPLICATION_REFEREE.user_id = DUPLICATE_REFEREE.user_id
	AND APPLICATION_REFEREE.id != DUPLICATE_REFEREE.id
SET DUPLICATE_REFEREE.comment_id = APPLICATION_REFEREE.comment_id
WHERE APPLICATION_REFEREE.comment_id IS NOT NULL
;

DELETE REFERENCE_COMMENT.*
FROM APPLICATION_REFEREE INNER JOIN REFERENCE_COMMENT
	ON APPLICATION_REFEREE.id = REFERENCE_COMMENT.referee_id
INNER JOIN (SELECT MIN(id) AS id,
		application_id AS application_id,
		user_id AS user_id
	FROM APPLICATION_REFEREE
	GROUP BY application_id, user_id
	HAVING COUNT(id) > 1
	ORDER BY user_id) AS DEDUPLICATE_REFEREE
	ON APPLICATION_REFEREE.application_id = DEDUPLICATE_REFEREE.application_id
		AND APPLICATION_REFEREE.user_id = DEDUPLICATE_REFEREE.user_id
		AND APPLICATION_REFEREE.id != DEDUPLICATE_REFEREE.id
;

DELETE REFERENCE_EVENT.*
FROM APPLICATION_REFEREE INNER JOIN REFERENCE_EVENT
	ON APPLICATION_REFEREE.id = REFERENCE_EVENT.referee_id
INNER JOIN (SELECT MIN(id) AS id,
		application_id AS application_id,
		user_id AS user_id
	FROM APPLICATION_REFEREE
	GROUP BY application_id, user_id
	HAVING COUNT(id) > 1
	ORDER BY user_id) AS DEDUPLICATE_REFEREE
	ON APPLICATION_REFEREE.application_id = DEDUPLICATE_REFEREE.application_id
		AND APPLICATION_REFEREE.user_id = DEDUPLICATE_REFEREE.user_id
		AND APPLICATION_REFEREE.id != DEDUPLICATE_REFEREE.id
;

DELETE APPLICATION_REFEREE.*
FROM APPLICATION_REFEREE INNER JOIN (
	SELECT MIN(id) AS id,
		application_id AS application_id,
		user_id AS user_id
	FROM APPLICATION_REFEREE
	GROUP BY application_id, user_id
	HAVING COUNT(id) > 1
	ORDER BY user_id) AS DEDUPLICATE_REFEREE
	ON APPLICATION_REFEREE.application_id = DEDUPLICATE_REFEREE.application_id
		AND APPLICATION_REFEREE.user_id = DEDUPLICATE_REFEREE.user_id
		AND APPLICATION_REFEREE.id != DEDUPLICATE_REFEREE.id
;

INSERT IGNORE INTO USER_ROLE (application_id, user_id, role_id, requesting_user_id, assigned_timestamp)
	SELECT APPLICATION.id, APPLICATION_REFEREE.user_id, "APPLICATION_REFEREE", APPLICATION.user_id, APPLICATION.submitted_timestamp
	FROM APPLICATION INNER JOIN APPLICATION_REFEREE
		ON APPLICATION.id = APPLICATION_REFEREE.application_id
	WHERE APPLICATION_REFEREE.comment_id IS NULL
		AND APPLICATION_REFEREE.declined = 0
		AND (APPLICATION.state_id LIKE "APPLICATION_REVIEW%"
			OR APPLICATION.state_id LIKE "APPLICATION_INTERVIEW%"
			OR APPLICATION.state_id LIKE "APPPLICATION_APPROVAL%"
			OR APPLICATION.state_id = "APPLICATION_APPROVED"
			OR APPLICATION.state_id = "APPLICATION_REJECTED")
;

UPDATE APPLICATION INNER JOIN USER_ROLE
	ON APPLICATION.id = USER_ROLE.application_id
SET USER_ROLE.requesting_user_id = APPLICATION.user_id,
	USER_ROLE.assigned_timestamp = APPLICATION.submitted_timestamp
WHERE USER_ROLE.role_id IN ("APPLICATION_REFEREE", "APPLICATION_VIEWER_REFEREE")
;

INSERT INTO COMMENT_ASSIGNED_USER (comment_id, user_id, role_id)
	SELECT COMMENT.id, APPLICATION_REFEREE.user_id, "APPLICATION_REFEREE"
	FROM COMMENT INNER JOIN APPLICATION_REFEREE
		ON COMMENT.application_id = APPLICATION_REFEREE.application_id
	WHERE COMMENT.action_id = "APPLICATION_COMPLETE"
;

/* Fix the notification record tables */

RENAME TABLE USER_NOTIFICATION TO USER_NOTIFICATION_SYNDICATED
;

CREATE TABLE USER_NOTIFICATION_INDIVIDUAL (
	id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
	user_role_id INT(10) UNSIGNED NOT NULL,
	notification_template_id VARCHAR (100) NOT NULL,
	last_notification_timestamp DATE NOT NULL,
	PRIMARY KEY (id),
	UNIQUE INDEX (user_role_id, notification_template_id),
	INDEX (notification_template_id),
	FOREIGN KEY (user_role_id) REFERENCES USER_ROLE (id),
	FOREIGN KEY (notification_template_id) REFERENCES NOTIFICATION_TEMPLATE (id)
) ENGINE = INNODB
;

/* Application withdrawn comments */

/* Fix not null constraints on comment table */
