RENAME TABLE APPLICATION_FORM_REFEREE TO APPLICATION_REFEREE
;

DELETE
FROM APPLICATION_REFEREE
WHERE application_form_id IS NULL
;

ALTER TABLE APPLICATION_REFEREE
	CHANGE COLUMN application_form_id application_id INT(10) UNSIGNED NOT NULL,
	CHANGE COLUMN ADDRESS_ID address_id INT(10) UNSIGNED NOT NULL
;

RENAME TABLE APPLICATION_FORM_TRANSFER TO APPLICATION_TRANSFER
;

ALTER TABLE APPLICATION
	ADD COLUMN application_transfer_id INT(10) UNSIGNED,
	ADD INDEX (application_transfer_id)
;

UPDATE APPLICATION INNER JOIN APPLICATION_TRANSFER
	ON APPLICATION.id = APPLICATION_TRANSFER.application_id
SET APPLICATION.application_transfer_id = APPLICATION_TRANSFER.id
;

ALTER TABLE APPLICATION_TRANSFER
	DROP FOREIGN KEY APPLICATION_FORM_TRANSFER_ibfk_1,
	DROP COLUMN application_id
;

UPDATE APPLICATION_TRANSFER
SET created_timestamp = transfer_begin_timeppoint
WHERE created_timestamp IS NULL
;

CREATE TABLE APPLICATION_TRANSFER_STATE (
	id VARCHAR(50) NOT NULL,
	PRIMARY KEY (id)
) ENGINE = INNODB
	SELECT status AS id
	FROM APPLICATION_TRANSFER
	GROUP BY status
;

ALTER TABLE APPLICATION_TRANSFER
	MODIFY COLUMN created_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	CHANGE COLUMN transfer_begin_timeppoint began_timestamp DATETIME,
	CHANGE COLUMN transfer_end_timepoint ended_timestamp DATETIME,
	CHANGE COLUMN status application_transfer_state_id VARCHAR(50) NOT NULL DEFAULT "QUEUED_FOR_WEBSERVICE_CALL",
	ADD INDEX (application_transfer_state_id),
	ADD FOREIGN KEY (application_transfer_state_id) REFERENCES APPLICATION_TRANSFER_STATE (id),
	CHANGE COLUMN ucl_user_id_received external_applicant_reference VARCHAR(50),
	CHANGE COLUMN ucl_booking_ref_number_received external_transfer_reference VARCHAR(50)
;

RENAME TABLE APPLICATION_FORM_TRANSFER_ERROR TO APPLICATION_TRANSFER_ERROR
;

CREATE TABLE APPLICATION_TRANSFER_ERROR_TYPE (
	id VARCHAR(50) NOT NULL,
	PRIMARY KEY (id)
) ENGINE = INNODB
	SELECT problem_classification AS id
	FROM APPLICATION_TRANSFER_ERROR
	GROUP BY problem_classification
;

ALTER TABLE APPLICATION_TRANSFER_ERROR
	DROP FOREIGN KEY APPLICATION_FORM_TRANSFER_ERROR_ibfk_1,
	CHANGE COLUMN transfer_id application_transfer_id INT(20) UNSIGNED NOT NULL,
	CHANGE COLUMN handling_time created_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	CHANGE COLUMN diagnostic_info report TEXT NOT NULL,
	CHANGE COLUMN problem_classification application_transfer_error_type_id VARCHAR(50) NOT NULL,
	ADD INDEX (application_transfer_error_type_id),
	ADD FOREIGN KEY (application_transfer_error_type_id) REFERENCES APPLICATION_TRANSFER_ERROR_TYPE (id),
	ADD COLUMN do_retry INT(1) UNSIGNED
;
	
UPDATE APPLICATION_TRANSFER_ERROR
SET do_retry = IF(error_handling_strategy = "RETRY", 1, 0)
;
	
ALTER TABLE APPLICATION_TRANSFER_ERROR
	MODIFY COLUMN do_retry INT(1) UNSIGNED NOT NULL,
	DROP COLUMN error_handling_strategy,
	DROP INDEX transfer_id
;

ALTER TABLE APPLICATION_TRANSFER
	MODIFY id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT
;

ALTER TABLE APPLICATION_TRANSFER_ERROR
	ADD FOREIGN KEY (application_transfer_id) REFERENCES APPLICATION_TRANSFER (id)
;

ALTER TABLE APPLICATION
	ADD FOREIGN KEY (application_transfer_id) REFERENCES APPLICATION_TRANSFER (id)
;

CREATE TABLE UPDATE_SCOPE (
	id VARCHAR(50) NOT NULL,
	precedence INT(10) UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	INDEX (precedence)
) ENGINE = INNODB
	SELECT "INTERNAL" AS id, 0 AS precedence
		UNION
	SELECT "EXTERNAL" AS id, 1 AS precedence
;

ALTER TABLE APPLICATION_ROLE
	ADD COLUMN update_scope_id VARCHAR(50),
	ADD INDEX (update_scope_id),
	ADD CONSTRAINT fk_application_role_update_scope_id 
		FOREIGN KEY (update_scope_id) REFERENCES UPDATE_SCOPE (id)
;

UPDATE APPLICATION_ROLE
SET update_scope_id = IF (update_visibility = 0, "EXTERNAL", "INTERNAL")
;

ALTER TABLE APPLICATION_ROLE
	DROP update_visibility
;

UPDATE APPLICATION_ROLE
SET update_scope_id = "EXTERNAL"
WHERE id = "APPLICATION_REFEREE"
;

CREATE TABLE APPLICATION_UPDATE (
	application_id INT(10) UNSIGNED NOT NULL,
	update_scope_id VARCHAR(50) NOT NULL,
	created_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (application_id, update_scope_id),
	INDEX (update_scope_id),
	FOREIGN KEY (application_id) REFERENCES APPLICATION (id),
	FOREIGN KEY (update_scope_id) REFERENCES UPDATE_SCOPE (id)
) ENGINE = INNODB
	SELECT APPLICATION_FORM_UPDATE.application_form_id AS application_id, 
		UPDATE_SCOPE.id AS update_scope_id, APPLICATION_FORM_UPDATE.created_timestamp AS created_timestamp
	FROM APPLICATION_FORM_USER_ROLE INNER JOIN APPLICATION_ROLE
		ON APPLICATION_FORM_USER_ROLE.application_role_id = APPLICATION_ROLE.id
	INNER JOIN APPLICATION_FORM_UPDATE
		ON APPLICATION_FORM_USER_ROLE.application_form_id = APPLICATION_FORM_UPDATE.application_form_id
	INNER JOIN UPDATE_SCOPE
		ON APPLICATION_ROLE.update_scope_id = UPDATE_SCOPE.id
	GROUP BY APPLICATION_FORM_UPDATE.application_form_id, UPDATE_SCOPE.id
;

CREATE TABLE APPLICATION_UPDATE_VIEW (
	application_id INT(10) UNSIGNED NOT NULL,
	update_scope_id VARCHAR(50) NOT NULL,
	user_id INT(10) UNSIGNED NOT NULL,
	PRIMARY KEY (application_id, update_scope_id, user_id),
	INDEX (update_scope_id),
	INDEX (user_id),
	FOREIGN KEY (application_id) REFERENCES APPLICATION (id),
	FOREIGN KEY (update_scope_id) REFERENCES UPDATE_SCOPE (id),
	FOREIGN KEY (user_id) REFERENCES USER (id)
) ENGINE = INNODB
	SELECT APPLICATION_UPDATE.application_id AS application_id,
		APPLICATION_UPDATE.update_scope_id AS update_scope_id,
		APPLICATION_FORM_UPDATE.registered_user_id AS user_id
	FROM APPLICATION_UPDATE INNER JOIN APPLICATION_FORM_UPDATE
		ON APPLICATION_UPDATE.application_id = APPLICATION_FORM_UPDATE.application_form_id
	WHERE APPLICATION_FORM_UPDATE.raises_update_flag = 0
;

DROP TABLE APPLICATION_FORM_UPDATE
;

RENAME TABLE APPLICATION_FORM_USER_ROLE TO APPLICATION_USER_ROLE
;

ALTER TABLE APPLICATION_USER_ROLE
	CHANGE application_form_id application_id INT(10) UNSIGNED NOT NULL
;
