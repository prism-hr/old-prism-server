CREATE TABLE APPLICATION_FORM_LANGUAGE_QUALIFICATION (
	id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
	qualification_type VARCHAR(50) NOT NULL,
	qualification_type_other VARCHAR(100),
	exam_date DATE NOT NULL,
	overall_score VARCHAR(10) NOT NULL,
	reading_score VARCHAR(10) NOT NULL,
	writing_score VARCHAR(10) NOT NULL,
	speaking_score VARCHAR(10) NOT NULL,
	listening_score VARCHAR(10) NOT NULL,
	exam_online INT(1) NOT NULL,
	document_id INT(10) UNSIGNED,
	personal_details_id INT(10) UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	INDEX (document_id),
	FOREIGN KEY (document_id) REFERENCES DOCUMENT (id)
) ENGINE = INNODB
;

INSERT INTO APPLICATION_FORM_LANGUAGE_QUALIFICATION (qualification_type,
	qualification_type_other, exam_date, overall_score, reading_score, writing_score,
	speaking_score, listening_score, exam_online, document_id, personal_details_id)
	SELECT language_qualification_type, language_qualification_type_name,
		language_exam_date, language_overall_score, language_reading_score,
		language_writing_score, language_speaking_score, language_listening_score,
		language_exam_online, language_qualification_document_id, id
	FROM APPLICATION_FORM_PERSONAL_DETAIL
	WHERE language_qualification_type IS NOT NULL
;

ALTER TABLE APPLICATION_FORM_PERSONAL_DETAIL
	ADD COLUMN application_form_language_qualification_id INT(10) UNSIGNED AFTER language_qualification_available,
	ADD INDEX (application_form_language_qualification_id),
	ADD CONSTRAINT APPLICATION_FORM_PERSONAL_DETAIL_ibfk3 FOREIGN KEY (application_form_language_qualification_id) 
		REFERENCES APPLICATION_FORM_LANGUAGE_QUALIFICATION (id)
;

UPDATE APPLICATION_FORM_PERSONAL_DETAIL INNER JOIN APPLICATION_FORM_LANGUAGE_QUALIFICATION
	ON APPLICATION_FORM_PERSONAL_DETAIL.id = APPLICATION_FORM_LANGUAGE_QUALIFICATION.personal_details_id
SET APPLICATION_FORM_PERSONAL_DETAIL.application_form_language_qualification_id =
	APPLICATION_FORM_LANGUAGE_QUALIFICATION.id
;

ALTER TABLE APPLICATION_FORM_LANGUAGE_QUALIFICATION
	DROP COLUMN personal_details_id
;

ALTER TABLE APPLICATION_FORM_PERSONAL_DETAIL
	DROP COLUMN language_qualification_type, 
	DROP COLUMN language_qualification_type_name,
	DROP COLUMN language_exam_date, 
	DROP COLUMN language_overall_score, 
	DROP COLUMN language_reading_score,
	DROP COLUMN language_writing_score, 
	DROP COLUMN language_speaking_score, 
	DROP COLUMN language_listening_score,
	DROP COLUMN language_exam_online,
	DROP FOREIGN KEY personal_detail_language_qualification_document_id_fk,
	DROP COLUMN language_qualification_document_id
;

CREATE TABLE APPLICATION_FORM_PASSPORT (
	id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
	number VARCHAR(35) NOT NULL,
	name VARCHAR(100) NOT NULL,
	issue_date DATE NOT NULL,
	expiry_date DATE NOT NULL,
	personal_details_id INT(10) UNSIGNED NOT NULL,
	PRIMARY KEY (id)
) ENGINE = INNODB
;

INSERT INTO APPLICATION_FORM_PASSPORT (number, name, issue_date, expiry_date, personal_details_id)
	SELECT passport_number, passport_name, passport_issue_date, passport_expiry_date, id
	FROM APPLICATION_FORM_PERSONAL_DETAIL
	WHERE passport_number IS NOT NULL
		AND LENGTH(passport_number) != 0
;

ALTER TABLE APPLICATION_FORM_PERSONAL_DETAIL
	ADD COLUMN application_form_passport_id INT(10) UNSIGNED AFTER passport_available,
	ADD INDEX (application_form_passport_id),
	ADD CONSTRAINT APPLICATION_FORM_PERSONAL_DETAIL_ibfk4 FOREIGN KEY (application_form_passport_id) 
		REFERENCES APPLICATION_FORM_PASSPORT (id)
;

UPDATE APPLICATION_FORM_PERSONAL_DETAIL INNER JOIN APPLICATION_FORM_PASSPORT
	ON APPLICATION_FORM_PERSONAL_DETAIL.id = APPLICATION_FORM_PASSPORT.personal_details_id
SET APPLICATION_FORM_PERSONAL_DETAIL.application_form_passport_id =
	APPLICATION_FORM_PASSPORT.id
;

ALTER TABLE APPLICATION_FORM_PASSPORT
	DROP COLUMN personal_details_id
;

ALTER TABLE APPLICATION_FORM_PERSONAL_DETAIL
	DROP COLUMN passport_number, 
	DROP COLUMN passport_name,
	DROP COLUMN passport_issue_date, 
	DROP COLUMN passport_expiry_date
;

ALTER TABLE SUGGESTED_SUPERVISOR
	ADD PRIMARY KEY (id),
	DROP INDEX suggested_supervisor_fk
;

RENAME TABLE APPLICATION_FORM_PROGRAMME_DETAIL TO APPLICATION_FORM_PROGRAM_DETAIL
;

ALTER TABLE APPLICATION_FORM
	CHANGE programme_details_id program_detail_id INT(10) UNSIGNED
;

UPDATE APPLICATION_FORM_PROGRAM_DETAIL
SET study_code = "F+++++"
WHERE study_code IS NULL
;

CREATE TABLE STUDY_OPTION (
	id VARCHAR(50) NOT NULL,
	display_name VARCHAR(50) NOT NULL,
	PRIMARY KEY (id))
ENGINE = INNODB
	SELECT study_code AS id, study_option AS display_name
	FROM PROGRAM_INSTANCE
	GROUP BY study_code
;

ALTER TABLE PROGRAM_INSTANCE
	CHANGE STUDY_CODE study_option_id VARCHAR(50) NOT NULL,
	ADD INDEX (study_option_id),
	ADD FOREIGN KEY (study_option_id) REFERENCES STUDY_OPTION (id),
	DROP COLUMN study_option
;	

ALTER TABLE APPLICATION_FORM_PROGRAM_DETAIL
	CHANGE STUDY_CODE study_option_id VARCHAR(50) NOT NULL,
	ADD INDEX (study_option_id),
	ADD FOREIGN KEY (study_option_id) REFERENCES STUDY_OPTION (id),
	DROP COLUMN programme_name,
	DROP COLUMN project_name,
	DROP COLUMN study_option
;

DROP TABLE INSTITUTION_ADMINISTRATOR_LINK
;

UPDATE APPLICATION_FORM
SET is_exported = excluded
WHERE excluded = 1
;

ALTER TABLE APPLICATION_FORM
	DROP FOREIGN KEY approver_user_fk,
	DROP COLUMN approver_user_id,
	CHANGE COLUMN app_date_time created_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	CHANGE COLUMN submitted_on_timestamp submitted_timestamp DATETIME,
	CHANGE COLUMN last_updated update_timestamp DATETIME,
	DROP COLUMN accepted_terms,
	DROP COLUMN project_title,
	DROP FOREIGN KEY app_admin_fk,
	DROP COLUMN app_administrator_id,
	DROP COLUMN registry_users_notified,
	DROP FOREIGN KEY admin_requested_fk,
	DROP COLUMN admin_requested_registry_id,
	DROP COLUMN pending_approval_restart,
	CHANGE COLUMN IP_ADDRESS submitted_ip_address VARBINARY(16),
	DROP COLUMN avg_rating,
	DROP COLUMN excluded
;

ALTER TABLE APPLICATION_FORM_PERSONAL_DETAIL
	MODIFY COLUMN ethnicity_id INT(10) UNSIGNED NOT NULL,
	MODIFY COLUMN disability_id INT(10) UNSIGNED NOT NULL
;

DELETE 
FROM APPLICATION_FORM_EMPLOYMENT_POSITION
WHERE application_form_id IS NULL
;

ALTER TABLE APPLICATION_FORM_EMPLOYMENT_POSITION
	CHANGE COLUMN ADDRESS_ID address_id INT(10) UNSIGNED NOT NULL,
	MODIFY COLUMN application_form_id INT(10) UNSIGNED NOT NULL
;

DELETE 
FROM APPLICATION_FORM_FUNDING
WHERE application_form_id IS NULL
	OR document_id IS NULL
;

ALTER TABLE APPLICATION_FORM_FUNDING
	MODIFY COLUMN application_form_id INT(10) UNSIGNED NOT NULL,
	MODIFY COLUMN document_id INT(10) UNSIGNED NOT NULL
;

ALTER TABLE APPLICATION_FORM_FUNDING
	MODIFY COLUMN application_form_id INT(10) UNSIGNED NOT NULL
;

ALTER TABLE ADDRESS
	CHANGE COLUMN DOMICILE_ID domicile_id INT(10) UNSIGNED NOT NULL,
	CHANGE COLUMN ADDRESS1 address_line_1 VARCHAR(50) NOT NULL,
	CHANGE COLUMN ADDRESS2 address_line_2 VARCHAR(50),
	CHANGE COLUMN ADDRESS3 address_town VARCHAR(50) NOT NULL,
	CHANGE COLUMN ADDRESS4 address_region VARCHAR(50),
	CHANGE COLUMN ADDRESS5 address_code VARCHAR(12)
;

ALTER TABLE ADVERT 
	DROP COLUMN last_edited_timestamp
;

RENAME TABLE PROGRAM_CLOSING_DATES TO ADVERT_CLOSING_DATE
;

ALTER TABLE ADVERT_CLOSING_DATE
	DROP FOREIGN KEY advert_closing_date_ibfk_1,
	CHANGE COLUMN program_id advert_id INT(10) UNSIGNED NOT NULL,
	ADD FOREIGN KEY (advert_id) REFERENCES ADVERT (id)
;

INSERT INTO ADVERT_CLOSING_DATE (advert_id, closing_date, study_places)
	SELECT id, closing_date, 1
	FROM PROJECT
	WHERE closing_date IS NOT NULL
;

ALTER TABLE PROJECT
	DROP COLUMN closing_date
;

ALTER TABLE ADVERT
	ADD COLUMN advert_closing_date_id INT(10) UNSIGNED,
	ADD INDEX (advert_closing_date_id),
	ADD FOREIGN KEY (advert_closing_date_id) REFERENCES ADVERT_CLOSING_DATE (id)
;

UPDATE ADVERT INNER JOIN (
	SELECT ADVERT_CLOSING_DATE.advert_id AS advert_id, 
		ADVERT_CLOSING_DATE.id AS advert_closing_date_id
	FROM ADVERT_CLOSING_DATE INNER JOIN (
		SELECT advert_id AS advert_id, 
			MIN(closing_date) as closing_date
		FROM ADVERT_CLOSING_DATE
		WHERE closing_date >= CURRENT_DATE()
		GROUP BY advert_id
		) AS ACTIVE_CLOSING_DATE
		ON ADVERT_CLOSING_DATE.advert_id = ACTIVE_CLOSING_DATE.advert_id 
		AND ADVERT_CLOSING_DATE.closing_date = ACTIVE_CLOSING_DATE.closing_date
	) AS ACTIVE_CLOSING_DATE
SET ADVERT.advert_closing_date_id = ACTIVE_CLOSING_DATE.advert_closing_date_id
WHERE ADVERT.id = ACTIVE_CLOSING_DATE.advert_id
;

DELETE FROM ADVERT_CLOSING_DATE
WHERE closing_date < CURRENT_DATE
;

RENAME TABLE APPLICATIONS_FILTER TO APPLICATION_FILTER
;

RENAME TABLE APPLICATIONS_FILTERING TO APPLICATION_FILTER_GROUP
;

DELETE FROM APPLICATION_FILTER
WHERE fiLtering_id IS NULL
;

ALTER TABLE APPLICATION_FILTER
	CHANGE COLUMN filtering_id application_filter_group_id INT(10) UNSIGNED NOT NULL
;

ALTER TABLE APPLICATION_FILTER_GROUP
	CHANGE use_disjunction satisfy_all_conditions INT(1) UNSIGNED NOT NULL DEFAULT 1
;

UPDATE APPLICATION_FILTER_GROUP 
SET satisfy_all_conditions = IF(satisfy_all_conditions = 0, 1, 0)
;

RENAME TABLE APPLICATION_FORM TO APPLICATION
;

ALTER TABLE APPLICATION
	DROP FOREIGN KEY approver_requested_fk,
	DROP COLUMN approver_requested_restart_id
;

RENAME TABLE APPLICATION_FORM_ADDITIONAL_INFO TO APPLICATION_ADDITIONAL_INFORMATION
;

ALTER TABLE APPLICATION
	CHANGE COLUMN additional_info_id application_additional_information_id INT(10) UNSIGNED
;

RENAME TABLE APPLICATION_FORM_ACTION_OPTIONAL TO APPLICATION_ACTION_OPTIONAL
;

RENAME TABLE APPLICATION_FORM_ACTION_REQUIRED TO APPLICATION_ACTION_REQUIRED
;

ALTER TABLE APPLICATION_ACTION_REQUIRED
	CHANGE application_form_id application_id INT(10) UNSIGNED NOT NULL
;

RENAME TABLE APPLICATION_FORM_ADDRESS TO APPLICATION_ADDRESS
;

ALTER TABLE APPLICATION
	CHANGE COLUMN application_form_address_id application_address_id INT(10) UNSIGNED
;

RENAME TABLE APPLICATION_FORM_DOCUMENT TO APPLICATION_DOCUMENT
;

ALTER TABLE APPLICATION
	CHANGE COLUMN application_form_document_id application_document_id INT(10) UNSIGNED
;

RENAME TABLE APPLICATION_FORM_EMPLOYMENT_POSITION TO APPLICATION_EMPLOYMENT_POSITION
;

ALTER TABLE APPLICATION_EMPLOYMENT_POSITION
	DROP FOREIGN KEY application_form_employment_position_fk,
	CHANGE COLUMN application_form_id application_id INT(10) UNSIGNED NOT NULL,
	CHANGE COLUMN current is_current INT(1) UNSIGNED NOT NULL,
	ADD FOREIGN KEY (application_id) REFERENCES APPLICATION (id)
;

RENAME TABLE APPLICATION_FORM_FUNDING TO APPLICATION_FUNDING
;

ALTER TABLE APPLICATION_FUNDING
	DROP FOREIGN KEY application_form_funding_fk,
	CHANGE COLUMN application_form_id application_id INT(10) UNSIGNED NOT NULL,
	ADD FOREIGN KEY (application_id) REFERENCES APPLICATION (id)
;

RENAME TABLE APPLICATION_FORM_LANGUAGE_QUALIFICATION TO APPLICATION_LANGUAGE_QUALIFICATION
;

RENAME TABLE APPLICATION_FORM_PERSONAL_DETAIL TO APPLICATION_PERSONAL_DETAIL
;

ALTER TABLE APPLICATION
	CHANGE personal_detail_id application_personal_detail_id INT(10) UNSIGNED
;

ALTER TABLE APPLICATION_PERSONAL_DETAIL
	CHANGE COLUMN application_form_language_qualification_id application_language_qualification_id INT(10) UNSIGNED
;

UPDATE APPLICATION_PERSONAL_DETAIL INNER JOIN APPLICATION_LANGUAGE_QUALIFICATION
	ON APPLICATION_PERSONAL_DETAIL.application_language_qualification_id = 
		APPLICATION_LANGUAGE_QUALIFICATION.id
SET APPLICATION_PERSONAL_DETAIL.application_language_qualification_id = NULL
WHERE APPLICATION_LANGUAGE_QUALIFICATION.document_id IS NULL
;

DELETE 
FROM APPLICATION_LANGUAGE_QUALIFICATION
WHERE document_id IS NULL
;

ALTER TABLE APPLICATION_LANGUAGE_QUALIFICATION
	MODIFY document_id INT(10) UNSIGNED NOT NULL
;

RENAME TABLE APPLICATION_FORM_PASSPORT TO APPLICATION_PASSPORT
;

ALTER TABLE APPLICATION_PERSONAL_DETAIL
	CHANGE COLUMN application_form_passport_id application_passport_id INT(10) UNSIGNED
;

ALTER TABLE APPLICATION_PERSONAL_DETAIL
	MODIFY COLUMN language_qualification_available INT(1) UNSIGNED,
	MODIFY COLUMN passport_available INT(1) UNSIGNED,
	ADD COLUMN first_language_english INT(1) UNSIGNED NOT NULL AFTER english_first_language,
	ADD COLUMN visa_required INT(1) UNSIGNED NOT NULL AFTER requires_visa
;

UPDATE APPLICATION_PERSONAL_DETAIL
SET first_language_english = IF(english_first_language = "1", 1, 0),
	visa_required = IF(requires_visa = "1", 1, 0)
;

ALTER TABLE APPLICATION_PERSONAL_DETAIL
	DROP COLUMN english_first_language,
	DROP COLUMN requires_visa
;

RENAME TABLE APPLICATION_FORM_PROGRAM_DETAIL TO APPLICATION_PROGRAM_DETAIL
;

ALTER TABLE APPLICATION
	CHANGE COLUMN program_detail_id application_program_detail_id INT(10) UNSIGNED
;

RENAME TABLE APPLICATION_FORM_QUALIFICATION TO APPLICATION_QUALIFICATION
;

ALTER TABLE APPLICATION_QUALIFICATION
	DROP FOREIGN KEY application_form_qual_fk,
	CHANGE COLUMN application_form_id application_id INT(10) UNSIGNED NOT NULL,
	ADD FOREIGN KEY (application_id) REFERENCES APPLICATION (id)
;

DELETE APPLICATION_QUALIFICATION.*
FROM APPLICATION_QUALIFICATION INNER JOIN APPLICATION
	ON APPLICATION_QUALIFICATION.application_id = APPLICATION.id
LEFT JOIN APPLICATION_FORM_TRANSFER
	ON APPLICATION.id = APPLICATION_FORM_TRANSFER.application_id
WHERE APPLICATION_QUALIFICATION.proof_of_award_id IS NULL
	AND (APPLICATION.status = "UNSUBMITTED"
		OR is_exported = 1
		OR APPLICATION.status IN ("WITHDRAWN", "REJECTED"))
;

ALTER TABLE APPLICATION
	CHANGE applicant_id registered_user_id INT(10) UNSIGNED NOT NULL
;

ALTER TABLE DOCUMENT
	DROP FOREIGN KEY uploaded_by_fk,
	DROP uploaded_by_id
;

UPDATE DOCUMENT
SET is_referenced = 0
WHERE is_referenced IS NULL
;

ALTER TABLE DOCUMENT
	MODIFY is_referenced INT(1) UNSIGNED NOT NULL DEFAULT 0
;

DELETE FROM DOCUMENT
WHERE file_name IS NULL
	OR file_content IS NULL
	OR content_type IS NULL
	OR document_type IS NULL
;

ALTER TABLE DOCUMENT
	MODIFY file_name VARCHAR(500) NOT NULL,
	MODIFY file_content LONGBLOB NOT NULL,
	MODIFY content_type VARCHAR(200) NOT NULL,
	MODIFY document_type VARCHAR(50) NOT NULL,
	CHANGE COLUMN uploaded_time_stamp created_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
;

CREATE PROCEDURE SP_FILL_MISSING_PROOF_OF_AWARD_DOCUMENTS (
	IN in_document_to_copy_id INT(10) UNSIGNED)
BEGIN

	DECLARE next_record_to_process INT(10) UNSIGNED;
	DECLARE last_record_to_process INT(10) UNSIGNED;
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
   	ROLLBACK;
	END;

	CREATE TEMPORARY TABLE BROKEN_QUALIFICATION (
		id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
		qualification_id INT(10) UNSIGNED NOT NULL,
		application_id INT(10) UNSIGNED NOT NULL,
		PRIMARY KEY (id)
	) ENGINE = MEMORY
	SELECT NULL AS id, id AS qualification_id,
		application_id AS application_id
	FROM APPLICATION_QUALIFICATION
	WHERE proof_of_award_id IS NULL;
	
	START TRANSACTION;
	
		SET next_record_to_process = 1;
	
		SET last_record_to_process = (
			SELECT MAX(id)
			FROM BROKEN_QUALIFICATION);
		
		WHILE next_record_to_process <= last_record_to_process DO
			
			INSERT INTO DOCUMENT(file_name, file_content, content_type, document_type, 
				created_timestamp)
			SELECT DOCUMENT.file_name, DOCUMENT.file_content, DOCUMENT.content_type,
				DOCUMENT.document_type, APPLICATION.submitted_timestamp
			FROM DOCUMENT INNER JOIN BROKEN_QUALIFICATION
			INNER JOIN APPLICATION
				ON BROKEN_QUALIFICATION.application_id = APPLICATION.id
			WHERE DOCUMENT.id = in_document_to_copy_id
				AND BROKEN_QUALIFICATION.id = next_record_to_process;
				
			UPDATE BROKEN_QUALIFICATION INNER JOIN APPLICATION_QUALIFICATION
				ON BROKEN_QUALIFICATION.qualification_id = APPLICATION_QUALIFICATION.id
			SET APPLICATION_QUALIFICATION.proof_of_award_id = LAST_INSERT_ID()
			WHERE BROKEN_QUALIFICATION.id = next_record_to_process;
			
			SET next_record_to_process = next_record_to_process + 1;
		
		END WHILE;
			
		DROP TABLE BROKEN_QUALIFICATION;
	
	COMMIT;
	
END
;

CALL SP_FILL_MISSING_PROOF_OF_AWARD_DOCUMENTS (21588)
;

DROP PROCEDURE SP_FILL_MISSING_PROOF_OF_AWARD_DOCUMENTS
;

UPDATE APPLICATION_QUALIFICATION
SET send_to_ucl = 0
WHERE send_to_ucl IS NULL
;

UPDATE APPLICATION_QUALIFICATION
SET title = "N/A"
WHERE title IS NULL
;

UPDATE APPLICATION_QUALIFICATION
SET qualification_language = "N/A"
WHERE qualification_language IS NULL
;

ALTER TABLE APPLICATION_QUALIFICATION
	CHANGE proof_of_award_id document_id INT(10) UNSIGNED NOT NULL,
	CHANGE send_to_ucl export INT(1) UNSIGNED NOT NULL DEFAULT 0,
	MODIFY title VARCHAR(200) NOT NULL,
	MODIFY qualification_language VARCHAR(70) NOT NULL
;

CREATE TR_CREATE_CUSTOM_INSTITUTION_CODE BEFORE INSERT ON INSTITUTION 
FOR EACH ROW 
BEGIN
	
	DECLARE code_integer_part INT(10) UNSIGNED;
	
	SET code_integer_part = (
		SELECT COUNT(id) + 1
		FROM INSTITUTION
		WHERE code LIKE "CUST%");
		
	SET NEW.code = ( 
		SELECT CONCAT("CUST", LPAD(CONCAT("", code_integer_part, ""), 6, "0")));
	
END
;

INSERT IGNORE INTO INSTITUTION (name, domicile_code, enabled)
	SELECT IF(APPLICATION_QUALIFICATION.institution_name IS NOT NULL, 
		APPLICATION_QUALIFICATION.institution_name, 
		APPLICATION_QUALIFICATION.other_institution_name),
		IF(DOMICILE2.code IS NOT NULL, DOMICILE2.code, DOMICILE.code), 1
	FROM APPLICATION_QUALIFICATION INNER JOIN DOMICILE
		ON APPLICATION_QUALIFICATION.institution_domicile_id = DOMICILE.id
	LEFT JOIN DOMICILE AS DOMICILE2
		ON DOMICILE.enabled_object_id = DOMICILE2.id
	LEFT JOIN INSTITUTION
		ON APPLICATION_QUALIFICATION.institution_code = INSTITUTION.code
	WHERE (APPLICATION_QUALIFICATION.other_institution_name IS NOT NULL
		AND LENGTH(APPLICATION_QUALIFICATION.other_institution_name) > 0)
		OR INSTITUTION.code IS NULL
	GROUP BY APPLICATION_QUALIFICATION.other_institution_name
;

DROP TRIGGER TR_CREATE_CUSTOM_INSTITUTION_CODE
;

UPDATE APPLICATION_QUALIFICATION INNER JOIN INSTITUTION
	ON APPLICATION_QUALIFICATION.other_institution_name = INSTITUTION.name
SET APPLICATION_QUALIFICATION.institution_code = INSTITUTION.code
WHERE APPLICATION_QUALIFICATION.other_institution_name IS NOT NULL
		AND LENGTH(APPLICATION_QUALIFICATION.other_institution_name) > 0
;

ALTER TABLE APPLICATION_QUALIFICATION
	DROP COLUMN institution_name,
	DROP COLUMN other_institution_name,
	DROP FOREIGN KEY domicile_id_fk,
	DROP COLUMN institution_domicile_id,
	ADD COLUMN institution_id INT(10) UNSIGNED AFTER institution_code,
	ADD INDEX (institution_id),
	ADD FOREIGN KEY (institution_id) REFERENCES INSTITUTION (id)
;

UPDATE APPLICATION_QUALIFICATION INNER JOIN INSTITUTION
	ON APPLICATION_QUALIFICATION.institution_code = INSTITUTION.code
SET APPLICATION_QUALIFICATION.institution_id = INSTITUTION.id
;

ALTER TABLE APPLICATION_QUALIFICATION
	DROP COLUMN institution_code,
	MODIFY COLUMN institution_id INT(10) UNSIGNED NOT NULL
;
